{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Franck\\\\Desktop\\\\cd\\\\hackathon\\\\marketplacenft\\\\src\\\\frontend\\\\components\\\\Create.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projectId = '2GNzY8Z4IvMS720dWNEKZQEGs8o';\nconst projectSecret = '6aec003d1b3c3bcd6fab95c92a43b9ca';\nconst auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\nconst client = ipfsHttpClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  headers: {\n    authorization: auth\n  }\n});\n\nconst Create = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n\n  const uploadToIPFS = async event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file);\n        console.log(result);\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`);\n      } catch (error) {\n        console.log(\"BAD IPFS: \", error);\n      }\n    }\n  };\n\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return;\n\n    try {\n      const result = await client.add(JSON.stringify({\n        image,\n        price,\n        name,\n        description\n      }));\n      mintThenList(result);\n    } catch (error) {\n      console.log(\"ipfs uri uload error: \", error);\n    }\n  };\n\n  const mintThenList = async result => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`;\n    await (await nft.mint(uri)).wait();\n    const id = await nft.tokenCount();\n    await await nft.setApprovalForAll(marketplace.address, true);\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              required: true,\n              name: \"file\",\n              onChange: uploadToIPFS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setName(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"text\",\n              placeholder: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setDescription(e.target.value),\n              size: \"lg\",\n              required: true,\n              as: \"textarea\",\n              placeholder: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setPrice(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"number\",\n              placeholder: \"Price (ETH)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"g-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: createNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Create and list NFT!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Create, \"CejF301mm3S45QBEXO/SVXCwDzQ=\");\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","projectId","projectSecret","auth","Buffer","from","toString","client","host","port","protocol","headers","authorization","Create","marketplace","nft","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToIPFS","event","preventDefault","file","target","files","result","add","console","log","path","error","createNFT","JSON","stringify","mintThenList","uri","mint","wait","id","tokenCount","setApprovalForAll","address","listingPrice","utils","parseEther","makeItem","maxWidth","e","value"],"sources":["C:/Users/Franck/Desktop/cd/hackathon/marketplacenft/src/frontend/components/Create.js"],"sourcesContent":["import { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\n\nconst projectId = '2GNzY8Z4IvMS720dWNEKZQEGs8o';\nconst projectSecret = '6aec003d1b3c3bcd6fab95c92a43b9ca';\nconst auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\n\nconst client =  ipfsHttpClient({\n    host: 'ipfs.infura.io',\n    port: 5001,\n    protocol: 'https',\n    headers: {\n        authorization: auth,\n    },\n});\n\n\n\nconst Create = ({ marketplace, nft }) => {\n    const [image, setImage] = useState('');\n    const [price, setPrice] = useState(null);\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n    const uploadToIPFS = async (event) => {\n        event.preventDefault();\n        const file = event.target.files[0];\n        if (typeof file !== 'undefined') {\n            try {\n                const result = await client.add(file);\n                console.log(result);\n                setImage(`https://ipfs.infura.io/ipfs/${result.path}`);\n            } catch (error) {\n                console.log(\"BAD IPFS: \", error);\n            }\n        }\n    }\n    const createNFT = async () => {\n        if (!image || !price || !name || !description) return\n        try {\n            const result = await client.add(JSON.stringify({ image, price, name, description }));\n            mintThenList(result);\n        } catch (error) {\n            console.log(\"ipfs uri uload error: \", error);\n        }\n    }\n    const mintThenList = async (result) => {\n        const uri = `https://ipfs.infura.io/ipfs/${result.path}`;\n        await (await nft.mint(uri)).wait();\n        const id = await nft.tokenCount();\n        await (await nft.setApprovalForAll(marketplace.address, true));\n        const listingPrice = ethers.utils.parseEther(price.toString());\n        await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n    }\n\n    return (\n        <div className=\"container-fluid mt-5\">\n            <div className='row'>\n                <main role=\"main\" className='col-lg-12 mx-auto' style={{ maxWidth: '1000px' }}>\n                    <div className='content mx-auto'>\n                        <Row className='g-4'>\n                            <Form.Control\n                                type=\"file\"\n                                required\n                                name=\"file\"\n                                onChange={uploadToIPFS} />\n                            <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n                            <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\"/>\n                            <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder='Price (ETH)' />\n                            <div className='g-grid px-0'>\n                                <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n                                    Create and list NFT!\n                                </Button>\n                            </div>\n                        </Row>\n                    </div>\n                </main>\n            </div>\n        </div>\n    );\n}\n\nexport default Create;"],"mappings":"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"},"metadata":{},"sourceType":"module"}